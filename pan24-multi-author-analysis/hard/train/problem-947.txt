Requires all recording chips to embed cryptographic signatures in the raw data, and invalidates copies where the original was discarded after applying filters or when it was re-compressed during a youtube upload. When you can prove the data hasn't been tampered with, then the file is usable evidence, and proper security cameras likely already have been doing it for a decade. Phone cameras less so, but the more AI content generation ramps up, the more likely it'll become a standard feature. Too bad for the privacy nuts, as it'll mean that either you strip the metadata that proves authenticity, or they know exactly which physical camera chip was used. (I'm sure cryptographers can devise a system where you can't correlate the signature with its source, yet making the massive investment to crack a single TPM and extract its keys before it can self-destruct doesn't undermine every other chip from the same production run. But being that fancy would cost more in R&D, and the sliver of a market segment that cares enough about privacy won't be large enough to bother.).
Unlike decryption keys, every single unit can have its own unique signing key, generated on-chip in the factory, in turn signed by the manufacturer. It would be a direct parallel with how HTTPS works, each website generating its own private/public key pair and getting the public half signed by a certificate authority. Only the site ever knows its own private key, while you have proof that the CA thought the corresponding public key was valid.
Encryption with a private key while allowing decryption with a public key verifies identity of the source.
Public key cryptography is only really a good idea when you have a certain degree of trust in whoever physically holds the private key.
Fundamentally, in order to use it, a private key has to be exposed to, well reality. And reality is not a secure environment. If someone has access to the physical device, it can be compromised.
Signatures are made with private keys, and private keys embedded into devices will never ever possibly leak.
Even if you have a suspect, how do you verify that such a private key has indeed been compromised? The device could've been destroyed or gone missing for any number of very compelling reasons (lost, stolen, etc).